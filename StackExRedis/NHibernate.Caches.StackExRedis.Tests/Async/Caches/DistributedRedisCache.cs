//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using NHibernate.Cache;

namespace NHibernate.Caches.StackExRedis.Tests.Caches
{
	using System.Threading.Tasks;
	using System.Threading;
	public partial class DistributedRedisCache : CacheBase
	{

		/// <inheritdoc />
		public override Task<object> GetAsync(object key, CancellationToken cancellationToken)
		{
			// Use a random strategy to get the value.
			// A real distributed cache should use a proper load balancing.
			var strategy = _regionStrategies[_random.Next(0, _regionStrategies.Length - 1)];
			return strategy.GetAsync(key, cancellationToken);
		}

		/// <inheritdoc />
		public override async Task PutAsync(object key, object value, CancellationToken cancellationToken)
		{
			foreach (var strategy in _regionStrategies)
			{
				await (strategy.PutAsync(key, value, cancellationToken));
			}
		}

		/// <inheritdoc />
		public override async Task RemoveAsync(object key, CancellationToken cancellationToken)
		{
			foreach (var strategy in _regionStrategies)
			{
				await (strategy.RemoveAsync(key, cancellationToken));
			}
		}

		/// <inheritdoc />
		public override async Task ClearAsync(CancellationToken cancellationToken)
		{
			foreach (var strategy in _regionStrategies)
			{
				await (strategy.ClearAsync(cancellationToken));
			}
		}

		/// <inheritdoc />
		public override async Task<object> LockAsync(object key, CancellationToken cancellationToken)
		{
			// A simple locking that requires all instances to obtain the lock
			// A real distributed cache should use something like the Redlock algorithm.
			var lockValues = new string[_regionStrategies.Length];
			try
			{
				for (var i = 0; i < _regionStrategies.Length; i++)
				{
					lockValues[i] = await (_regionStrategies[i].LockAsync(key, cancellationToken));
				}

				return lockValues;
			}
			catch (CacheException)
			{
				for (var i = 0; i < _regionStrategies.Length; i++)
				{
					if (lockValues[i] == null)
					{
						continue;
					}
					await (_regionStrategies[i].UnlockAsync(key, lockValues[i], cancellationToken));
				}
				throw;
			}
		}

		/// <inheritdoc />
		public override async Task UnlockAsync(object key, object lockValue, CancellationToken cancellationToken)
		{
			var lockValues = (string[]) lockValue;
			for (var i = 0; i < _regionStrategies.Length; i++)
			{
				await (_regionStrategies[i].UnlockAsync(key, lockValues[i], cancellationToken));
			}
		}
	}
}
