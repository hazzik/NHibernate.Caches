//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using StackExchange.Redis;
using static NHibernate.Caches.StackExchangeRedis.ConfigurationHelper;

namespace NHibernate.Caches.StackExchangeRedis
{
	public sealed partial class FastTwoLayerCacheRegionStrategy : FastRegionStrategy
	{

		/// <inheritdoc />
		protected override Task ExecutePutAsync(string cacheKey, object value, CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			return _twoLayerCache.PutAsync(cacheKey, value, cancellationToken);
		}

		/// <inheritdoc />
		protected override Task<object> ExecuteGetAsync(string cacheKey, CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			return _twoLayerCache.GetAsync(cacheKey, cancellationToken);
		}

		/// <inheritdoc />
		protected override Task<object[]> ExecuteGetManyAsync(RedisKey[] cacheKeys, CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object[]>(cancellationToken);
			}
			return _twoLayerCache.GetManyAsync(cacheKeys, cancellationToken);
		}

		/// <inheritdoc />
		protected override Task<bool> ExecuteRemoveAsync(string cacheKey, CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<bool>(cancellationToken);
			}
			return _twoLayerCache.RemoveAsync(cacheKey, cancellationToken);
		}
	}
}
