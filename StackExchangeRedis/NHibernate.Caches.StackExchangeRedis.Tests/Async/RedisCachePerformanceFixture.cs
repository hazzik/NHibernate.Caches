//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using NHibernate.Cache;
using NHibernate.Caches.Common.Tests;
using NUnit.Framework;

namespace NHibernate.Caches.StackExchangeRedis.Tests
{
	using System.Threading;
	public partial class RedisCachePerformanceFixture : Fixture
	{

		[Test]
		public async Task TestGetOperationAsync()
		{
			await (TestOperationAsync("Get", true, (cache, key, _) => cache.GetAsync(key, CancellationToken.None)));
		}

		[Test]
		public async Task TestGetManyOperationAsync()
		{
			await (TestBatchOperationAsync("GetMany", true, (cache, keys, _) => cache.GetManyAsync(keys, CancellationToken.None), BatchSize));
		}

		[Test]
		public async Task TestGetOperationWithSlidingExpirationAsync()
		{
			var props = new Dictionary<string, string> {{"sliding", "true"}};
			await (TestOperationAsync("Get", true, (cache, key, _) => cache.GetAsync(key, CancellationToken.None),
				caches: new List<RedisCache> {GetDefaultRedisCache(props), GetFastRedisCache(props)}));
		}

		[Test]
		public async Task TestGetManyOperationWithSlidingExpirationAsync()
		{
			var props = new Dictionary<string, string> {{"sliding", "true"}};
			await (TestBatchOperationAsync("GetMany", true, (cache, keys, _) => cache.GetManyAsync(keys, CancellationToken.None),
				batchSize: BatchSize,
				caches: new List<RedisCache> {GetDefaultRedisCache(props), GetFastRedisCache(props)}));
		}

		[Test]
		public async Task TestPutOperationAsync()
		{
			var props = new Dictionary<string, string> {{"expiration", "0"}};
			await (TestOperationAsync("Put", false, (cache, key, value) => cache.PutAsync(key, value, CancellationToken.None),
				caches: new List<RedisCache> {GetFastRedisCache(props)}));
		}

		[Test]
		public async Task TestPutManyOperationAsync()
		{
			var props = new Dictionary<string, string> {{"expiration", "0"}};
			await (TestBatchOperationAsync("PutMany", false, (cache, keys, values) => cache.PutManyAsync(keys, values, CancellationToken.None),
				batchSize: null,
				caches: new List<RedisCache> {GetFastRedisCache(props)}));
		}

		[Test]
		public async Task TestPutOperationWithExpirationAsync()
		{
			await (TestOperationAsync("Put", false, (cache, key, value) => cache.PutAsync(key, value, CancellationToken.None)));
		}

		[Test]
		public async Task TestPutManyOperationWithExpirationAsync()
		{
			await (TestBatchOperationAsync("PutMany", false, (cache, keys, values) => cache.PutManyAsync(keys, values, CancellationToken.None), null));
		}

		[Test]
		public async Task TestLockUnlockOperationAsync()
		{
			await (TestOperationAsync("Lock/Unlock", true, async (cache, key, _) =>
			{
				var value = await (cache.LockAsync(key, CancellationToken.None));
				await (cache.UnlockAsync(key, value, CancellationToken.None));
			}));
		}

		[Test]
		public async Task TestLockUnlockManyOperationAsync()
		{
			await (TestBatchOperationAsync("LockMany/UnlockMany", true, async (cache, keys, _) =>
			{
				var value = await (cache.LockManyAsync(keys, CancellationToken.None));
				await (cache.UnlockManyAsync(keys, value, CancellationToken.None));
			}, null));
		}

		private async Task PutCacheDataAsync(CacheBase cache, Dictionary<CacheKey, List<object>> cacheData, CancellationToken cancellationToken = default(CancellationToken))
		{
			foreach (var pair in cacheData)
			{
				await (cache.PutAsync(pair.Key, pair.Value, cancellationToken));
			}
		}

		private async Task RemoveCacheDataAsync(CacheBase cache, Dictionary<CacheKey, List<object>> cacheData, CancellationToken cancellationToken = default(CancellationToken))
		{
			foreach (var pair in cacheData)
			{
				await (cache.RemoveAsync(pair.Key, cancellationToken));
			}
		}
	}
}
