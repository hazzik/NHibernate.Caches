//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using NHibernate.Cache;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Caching.Distributed;
using NHibernate.Caches.Common;
using NHibernate.Caches.Util;
using NHibernate.Util;

namespace NHibernate.Caches.CoreDistributedCache
{

	public abstract partial class CoreDistributedCacheBase : CacheBase
	{

		/// <inheritdoc />
		public override async Task<object> GetAsync(object key, CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			if (key == null)
			{
				return null;
			}

			var cacheKey = GetCacheKey(key);
			Log.Debug("Fetching object '{0}' from the cache.", cacheKey);

			var cachedData = await (_cache.GetAsync(cacheKey, cancellationToken)).ConfigureAwait(false);
			if (cachedData == null)
				return null;

			return _serializer.Deserialize(cachedData);
		}

		/// <inheritdoc />
		public override Task PutAsync(object key, object value, CancellationToken cancellationToken)
		{
			if (key == null)
			{
				throw new ArgumentNullException(nameof(key), "null key not allowed");
			}

			if (value == null)
			{
				throw new ArgumentNullException(nameof(value), "null value not allowed");
			}
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			try
			{

				var entry = new Tuple<object, object>(key, value);
				var cachedData = _serializer.Serialize(entry);

				var cacheKey = GetCacheKey(key);
				var options = new DistributedCacheEntryOptions();
				if (UseSlidingExpiration)
					options.SlidingExpiration = Expiration;
				else
					options.AbsoluteExpirationRelativeToNow = Expiration;

				Log.Debug("putting item with key: {0}", cacheKey);
				return _cache.SetAsync(cacheKey, cachedData, options, cancellationToken);
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		/// <inheritdoc />
		public override Task RemoveAsync(object key, CancellationToken cancellationToken)
		{
			if (key == null)
			{
				throw new ArgumentNullException(nameof(key));
			}
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			try
			{

				var cacheKey = GetCacheKey(key);
				Log.Debug("removing item with key: {0}", cacheKey);
				return _cache.RemoveAsync(cacheKey, cancellationToken);
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		/// <inheritdoc />
		public override Task ClearAsync(CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			try
			{
				Clear();
				return Task.CompletedTask;
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		/// <inheritdoc />
		public override Task<object> LockAsync(object key, CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			try
			{
				return Task.FromResult<object>(Lock(key));
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		/// <inheritdoc />
		public override Task UnlockAsync(object key, object lockValue, CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			try
			{
				Unlock(key, lockValue);
				return Task.CompletedTask;
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}
	}
}
